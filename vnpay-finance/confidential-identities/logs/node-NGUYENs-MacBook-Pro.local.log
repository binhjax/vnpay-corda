[INFO ] 2019-01-30T09:26:36,453Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/0/cordapps] {}
[INFO ] 2019-01-30T09:26:36,502Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/0/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:26:36,576Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/0/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:26:36,729Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:26:38,906Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:26:38,998Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:26:39,076Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:26:39,501Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:26:49,169Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:26:49,178Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:26:49,179Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:26:49,253Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:26:49,322Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:26:49,333Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:26:53,896Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:26:54,893Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:26:54,893Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:54,906Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:55,182Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:55,293Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:26:55,328Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:55,395Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:55,482Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-01-30T09:26:56,190Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:56,225Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:56,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:56,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:56,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:56,243Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/1/cordapps] {}
[INFO ] 2019-01-30T09:26:56,248Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/1/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:26:56,249Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/1/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:26:56,303Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:26:56,323Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:26:56,390Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:26:56,390Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:26:56,399Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:26:57,263Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:26:57,624Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:26:57,625Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:26:57,630Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:26:57,632Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:26:57,668Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:57,669Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:57,955Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:57,965Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:26:57,966Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:57,970Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:57,986Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,009Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:26:58,015Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,023Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:58,041Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,044Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:58,047Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:58,070Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,073Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:58,092Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,092Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:58,092Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:58,092Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:58,097Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/2/cordapps] {}
[INFO ] 2019-01-30T09:26:58,098Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/2/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:26:58,098Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/2/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:26:58,123Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:26:58,134Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:26:58,176Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:26:58,176Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:26:58,183Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:26:58,824Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:26:58,828Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:26:58,829Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:26:58,835Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:26:58,836Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:26:58,869Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:58,871Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:59,168Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:26:59,180Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:26:59,180Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,185Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:59,202Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,218Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:26:59,224Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,233Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:59,252Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,254Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:26:59,257Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:59,277Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,279Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:59,300Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:26:59,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:59,322Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,326Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:26:59,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:59,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:26:59,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:26:59,375Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/3/cordapps] {}
[INFO ] 2019-01-30T09:26:59,378Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/3/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:26:59,378Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/3/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:26:59,408Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:26:59,423Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:26:59,485Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:26:59,486Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:26:59,493Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:00,180Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:00,184Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:00,185Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:00,189Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:00,190Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:00,218Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:00,218Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:00,481Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:00,491Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:00,491Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,495Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,514Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,530Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:00,536Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,545Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:00,564Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,568Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:00,570Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,592Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,595Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,620Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:00,622Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,640Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,643Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,660Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:00,662Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,680Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,683Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:00,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:00,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:00,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:01,058Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/4/cordapps] {}
[INFO ] 2019-01-30T09:27:01,058Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/4/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:01,059Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/4/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:01,084Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:01,095Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:01,139Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:01,140Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:01,146Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:01,744Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:01,751Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/4/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:01,752Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:01,756Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:01,757Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:01,785Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:01,786Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:02,052Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:02,063Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:02,063Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,068Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,084Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,100Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:02,108Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,127Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:02,185Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,194Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:02,197Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,221Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,224Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,250Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:02,253Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,277Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,282Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:02,318Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,338Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,341Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,360Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:02,362Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,382Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,385Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:02,400Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,401Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:02,401Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:02,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:02,408Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/5/cordapps] {}
[INFO ] 2019-01-30T09:27:02,409Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/5/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:02,409Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/5/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:02,435Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:02,446Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:02,501Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:02,501Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:02,512Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:03,145Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:03,152Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/5/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:03,153Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:03,157Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:03,158Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:03,194Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:03,195Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:03,441Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:03,449Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:03,450Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,453Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,467Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,478Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:03,484Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,492Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:03,508Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,510Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:03,512Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,531Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,534Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:03,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,567Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,569Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,584Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:03,586Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,601Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,602Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,621Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:03,623Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,639Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,642Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:03,659Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,676Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,678Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:03,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:03,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:03,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:03,697Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/6/cordapps] {}
[INFO ] 2019-01-30T09:27:03,698Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/6/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:03,698Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/6/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:03,724Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:03,735Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:03,768Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:03,769Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:03,776Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:04,357Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:04,361Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/6/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:04,361Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:04,365Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:04,366Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:04,393Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:04,393Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:04,580Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:04,587Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:04,588Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,591Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,600Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,609Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:04,614Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,625Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:04,633Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,634Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:04,636Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,651Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,653Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,669Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:04,673Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,688Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,689Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,698Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:04,700Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,711Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,712Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,724Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:04,726Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,738Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:04,751Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,762Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,763Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:04,775Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,787Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,789Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:04,800Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,800Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:04,801Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:04,801Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:04,830Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/7/cordapps] {}
[INFO ] 2019-01-30T09:27:04,831Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/7/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:04,831Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/7/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:04,858Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:04,879Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:04,917Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:04,918Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:04,923Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:05,398Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:05,403Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/7/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:05,403Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:05,406Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:05,407Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:05,430Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:05,430Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:05,678Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:05,688Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:05,688Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,692Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,704Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,717Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:05,725Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,734Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:05,753Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,756Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:05,758Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,777Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,779Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:05,794Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,806Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,809Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:05,825Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,838Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,841Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,858Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:05,860Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,875Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,888Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:05,890Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,903Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,905Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,920Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:05,922Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,935Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,938Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,954Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:05,956Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,972Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,974Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:05,987Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,987Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:05,988Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:05,988Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:05,993Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/8/cordapps] {}
[INFO ] 2019-01-30T09:27:05,994Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/8/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:05,994Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/8/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:06,020Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:06,036Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:06,077Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:06,078Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:06,083Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:06,637Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:06,640Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/8/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:06,641Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:06,649Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:06,649Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:06,671Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:06,672Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:06,902Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:06,909Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:06,909Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:06,913Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:06,960Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:06,972Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:06,977Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:06,984Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:07,002Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,005Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:07,006Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,019Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,020Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,033Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:07,035Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,047Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,049Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,060Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:07,061Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,071Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,073Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,085Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:07,086Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,098Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,099Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,113Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:07,115Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,127Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,130Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,142Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:07,144Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,155Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,156Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,167Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:07,169Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,180Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,182Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,192Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:07,194Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,205Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,207Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:07,217Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,217Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:07,217Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:07,217Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:07,225Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/9/cordapps] {}
[INFO ] 2019-01-30T09:27:07,225Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/9/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:07,226Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/9/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:07,249Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:07,259Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:07,289Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:07,289Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:07,293Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:07,800Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:07,803Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/9/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:07,803Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:07,806Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:07,807Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:07,830Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:07,830Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:07,996Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:08,008Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:08,009Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,011Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,021Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,031Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:08,036Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,044Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:08,057Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,059Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:08,061Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,072Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,074Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,083Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:08,085Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,096Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,098Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,109Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:08,110Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,121Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,123Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:08,134Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,144Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,145Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,157Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,167Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,169Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,178Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:08,181Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,191Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,193Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,202Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:08,204Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,214Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,216Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,230Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:08,231Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,240Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,242Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:08,257Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,268Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,270Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:08,283Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,283Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:08,283Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:08,284Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-01-30T09:27:09,238Z [Mock node 8 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A0CE95F4E29F523A70B1C42725B57C16728163A600075990B0F33AB0EBD360FC, not inserting the second time {fiber-id=10000002, flow-id=91541b2a-0581-4a22-af2c-ae7d7225ebdd, invocation_id=6c8b61bb-9759-4a82-8d06-522ff7314f81, invocation_timestamp=2019-01-30T09:27:09.093Z, origin=CN=7, O=Alice Corp, L=Madrid, C=ES, session_id=6c8b61bb-9759-4a82-8d06-522ff7314f81, session_timestamp=2019-01-30T09:27:09.093Z, thread-id=279}
[WARN ] 2019-01-30T09:27:09,238Z [Mock node 7 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AB5CC52429BE8F5060DFE347D7FC40DB7B4FB1B53DC93D954DBE49B31CF0841B, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=CN=7, O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=605b5d0e-85f2-402a-bbd0-da44e56cd73c, invocation_id=30ee1b1f-aedc-4b4b-a2ed-043bb74b124f, invocation_timestamp=2019-01-30T09:27:08.335Z, origin=Only For Testing, session_id=30ee1b1f-aedc-4b4b-a2ed-043bb74b124f, session_timestamp=2019-01-30T09:27:08.335Z, thread-id=278}
[INFO ] 2019-01-30T09:27:09,366Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/10/cordapps] {}
[INFO ] 2019-01-30T09:27:09,366Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/10/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:09,367Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/10/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:09,391Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:09,402Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:09,436Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:09,437Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:09,442Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:10,026Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:10,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/10/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:10,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:10,034Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:10,034Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:10,061Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:10,062Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:10,262Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:10,271Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:10,271Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,275Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,284Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,293Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:10,298Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,304Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:10,318Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:10,324Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,338Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,341Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,355Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:10,357Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,367Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,368Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,379Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:10,380Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,391Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,393Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,404Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:10,406Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,416Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,418Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,431Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:10,432Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,443Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,445Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:10,458Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,469Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,471Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,480Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:10,482Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,492Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,494Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,509Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:10,511Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,521Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,523Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,535Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:10,536Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:10,563Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,573Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,575Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:10,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:10,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:10,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:10,593Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/11/cordapps] {}
[INFO ] 2019-01-30T09:27:10,594Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/11/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:10,594Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/11/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:10,619Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:10,630Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:10,664Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:10,664Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:10,669Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:11,193Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:11,197Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/11/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:11,197Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:11,200Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:11,201Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:11,231Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:11,232Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:11,429Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:11,437Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:11,437Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,440Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,448Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,457Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:11,463Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,469Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:11,483Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,485Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:11,486Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,496Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,498Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,515Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:11,516Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,528Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,529Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:11,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,550Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,552Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,562Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:11,565Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,577Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,578Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,588Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:11,589Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,599Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,600Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,610Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:11,612Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,623Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,624Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,634Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:11,635Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,646Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:11,659Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,668Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,671Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,682Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:11,683Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,694Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,695Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,706Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:11,707Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,718Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,721Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:11,731Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,741Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,742Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:11,754Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,754Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:11,754Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:11,754Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:11,761Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/12/cordapps] {}
[INFO ] 2019-01-30T09:27:11,762Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/12/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:11,762Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/12/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:11,789Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:11,803Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:11,842Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:11,842Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:11,848Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:12,490Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:12,493Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/12/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:12,495Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:12,498Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:12,499Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:12,534Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:12,534Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:12,747Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:12,755Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:12,756Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,759Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,769Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,778Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:12,783Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,789Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:12,813Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:12,819Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,835Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,836Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,846Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:12,849Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,861Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,869Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:12,871Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,881Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,883Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,894Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:12,896Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,907Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,909Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,923Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:12,926Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,937Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,971Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:12,973Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,987Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:12,989Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:12,997Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:12,998Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,038Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,040Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,048Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:13,051Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,064Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,065Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,076Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:13,081Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,097Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,108Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:13,110Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,121Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,123Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:13,136Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,147Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,150Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,162Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:13,164Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,178Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,180Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:13,189Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:13,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:13,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:13,194Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092623.588/nodes/13/cordapps] {}
[INFO ] 2019-01-30T09:27:13,195Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/13/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:13,195Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092623.588/nodes/13/cordapps/net.corda.confidential.SwapIdentitiesFlowTests_1_5_5c0d0a5a-db58-43d4-a23c-c1c9e8403d3e.jar {}
[INFO ] 2019-01-30T09:27:13,221Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:13,232Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:13,272Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:13,273Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesInitiator to initiate net.corda.confidential.SwapIdentitiesFlowTests$SwapIdentitiesResponder (version 1) {}
[INFO ] 2019-01-30T09:27:13,279Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:26:23.589Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:13,812Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:13,815Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092623.588/nodes/13/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:13,816Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:13,819Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:13,820Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:13,840Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:13,840Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:14,002Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-01-30T09:27:14,010Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:14,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,014Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,023Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,030Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:14,037Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,044Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:14,055Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,057Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840414893) {}
[INFO ] 2019-01-30T09:27:14,059Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,069Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,070Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,081Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=1, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840417965) {}
[INFO ] 2019-01-30T09:27:14,082Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,090Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,092Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,100Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=2, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840419180) {}
[INFO ] 2019-01-30T09:27:14,101Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,111Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,120Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=3, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840420491) {}
[INFO ] 2019-01-30T09:27:14,122Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,130Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,132Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,138Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=4, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840422063) {}
[INFO ] 2019-01-30T09:27:14,140Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,148Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=5, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840423449) {}
[INFO ] 2019-01-30T09:27:14,159Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,167Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,169Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,179Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=6, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840424587) {}
[INFO ] 2019-01-30T09:27:14,180Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,189Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,190Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,198Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=7, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840425688) {}
[INFO ] 2019-01-30T09:27:14,199Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,206Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,207Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,216Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=8, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840426909) {}
[INFO ] 2019-01-30T09:27:14,217Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,226Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,228Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,236Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=9, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840428008) {}
[INFO ] 2019-01-30T09:27:14,238Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,245Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,247Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,258Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=10, O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840430271) {}
[INFO ] 2019-01-30T09:27:14,259Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,268Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,270Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,280Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840431437) {}
[INFO ] 2019-01-30T09:27:14,281Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,290Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,291Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=12, O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840432755) {}
[INFO ] 2019-01-30T09:27:14,300Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,310Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:14,319Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:14,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[CN=11, O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840434010) {}
[INFO ] 2019-01-30T09:27:14,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:14,900Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092714.440/nodes/0/cordapps] {}
[INFO ] 2019-01-30T09:27:14,900Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:14,901Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:15,134Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:15,135Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:15,225Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-01-30T09:27:15,226Z [Test worker] cordapp.CordappResolver.register - More than one CorDapp registered for net.corda.core.internal.cordapp.CordappImpl. {}
[WARN ] 2019-01-30T09:27:15,226Z [Test worker] cordapp.CordappResolver.register - More than one CorDapp registered for net.corda.core.internal.cordapp.CordappImpl. {}
[INFO ] 2019-01-30T09:27:15,235Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:15,240Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:15,242Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:15,243Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:15,252Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:14.440Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:15,875Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:15,880Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092714.440/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:15,880Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:15,938Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:15,952Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:15,953Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:16,235Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:16,243Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:16,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:16,249Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:16,279Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:16,294Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:16,299Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:16,305Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:16,797Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:16,939Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:16,942Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:16,943Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:16,947Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:16,957Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-01-30T09:27:16,987Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092714.440/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:17,175Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:17,190Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:17,205Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:17,205Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:17,205Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:17,205Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:17,219Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092714.440/nodes/1/cordapps] {}
[INFO ] 2019-01-30T09:27:17,220Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:17,221Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:17,334Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:17,334Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:17,366Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:17,376Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:17,403Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:17,404Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:17,404Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:17,409Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:14.440Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:17,967Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:17,970Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092714.440/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:17,971Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:18,005Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:18,006Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:18,031Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:18,031Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:18,189Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:18,195Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:18,195Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,198Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:18,203Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,211Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:18,217Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,222Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:18,556Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:18,565Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:18,566Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:18,567Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:18,569Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:18,574Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092714.440/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:18,574Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:18,586Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,593Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:18,594Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:18,602Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,603Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:18,609Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,609Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:18,609Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:18,610Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:18,622Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092714.440/nodes/2/cordapps] {}
[INFO ] 2019-01-30T09:27:18,623Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:18,623Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:18,721Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:18,722Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092714.440/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:18,752Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:18,762Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:18,793Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:18,794Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:18,794Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:18,799Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:14.440Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:19,388Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:19,393Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092714.440/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:19,393Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:19,435Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:19,437Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:19,463Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:19,463Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:19,673Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:19,680Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:19,680Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:19,683Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:19,691Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:19,699Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:19,706Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:19,711Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:20,089Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:20,098Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:20,099Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:20,101Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:20,103Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:20,110Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092714.440/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:20,111Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:20,125Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:20,131Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840436243) {}
[INFO ] 2019-01-30T09:27:20,133Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:20,141Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:20,144Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:20,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840438195) {}
[INFO ] 2019-01-30T09:27:20,156Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:20,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:20,166Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:20,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:20,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:20,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840439680) {}
[INFO ] 2019-01-30T09:27:20,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:20,186Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.IdentitySyncFlowTests$Initiator to initiate net.corda.confidential.IdentitySyncFlowTests$Receive (version 1) {}
[WARN ] 2019-01-30T09:27:20,396Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578}
[WARN ] 2019-01-30T09:27:20,396Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578}
[INFO ] 2019-01-30T09:27:22,900Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:22,901Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:23,150Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:23,150Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[WARN ] 2019-01-30T09:27:23,361Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 75AF186C9D21CAAD9C591F6894C7B3EF5E7C8350DB1836CD84162A8BA3060EA5, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[WARN ] 2019-01-30T09:27:23,363Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7C24A7D054268F4D9000B684D7E638B36AB6C74A271C3FFBCC4A6BC9311B5DFB, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:23,364Z [Mock node 1 thread] corda.flow.call - Generating spend for: 66749b23-9552-4dbb-981c-64cf47ff25cf {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:23,459Z [Mock node 1 thread] corda.flow.call - Signing transaction for: 66749b23-9552-4dbb-981c-64cf47ff25cf {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[INFO ] 2019-01-30T09:27:23,736Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=FD2CBDFE61D6477A5377C3C74FC901B90679224C14EE473805D629596664A906}
[WARN ] 2019-01-30T09:27:23,831Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 75AF186C9D21CAAD9C591F6894C7B3EF5E7C8350DB1836CD84162A8BA3060EA5, not inserting the second time {fiber-id=10000004, flow-id=4e42ea73-abaa-4da4-8dbb-5d8f62379687, invocation_id=28afaeb7-07ff-4765-a918-d782c9148f32, invocation_timestamp=2019-01-30T09:27:23.283Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=28afaeb7-07ff-4765-a918-d782c9148f32, session_timestamp=2019-01-30T09:27:23.283Z, thread-id=578}
[WARN ] 2019-01-30T09:27:23,831Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8CCAA68158E7F6BA0C08BB4EC65A1BF2DE9760B7A9B5416A9553EFA7FB6956E8, not inserting the second time {fiber-id=10000004, flow-id=4e42ea73-abaa-4da4-8dbb-5d8f62379687, invocation_id=28afaeb7-07ff-4765-a918-d782c9148f32, invocation_timestamp=2019-01-30T09:27:23.283Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=28afaeb7-07ff-4765-a918-d782c9148f32, session_timestamp=2019-01-30T09:27:23.283Z, thread-id=578}
[INFO ] 2019-01-30T09:27:23,860Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[INFO ] 2019-01-30T09:27:23,962Z [Mock node 0 thread] notary.SinglePartyNotaryService.createServiceFlow - Starting in validating mode {}
[WARN ] 2019-01-30T09:27:24,026Z [Mock node 0 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000005, flow-id=7644fb5c-36f0-4590-a9fa-6bbefd275c9b, invocation_id=e378db9e-7255-4d3a-9065-26c3207fd267, invocation_timestamp=2019-01-30T09:27:23.967Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e378db9e-7255-4d3a-9065-26c3207fd267, session_timestamp=2019-01-30T09:27:23.967Z, thread-id=593}
[INFO ] 2019-01-30T09:27:24,292Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[INFO ] 2019-01-30T09:27:24,294Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[INFO ] 2019-01-30T09:27:24,368Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[INFO ] 2019-01-30T09:27:24,368Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[INFO ] 2019-01-30T09:27:24,368Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=66749b23-9552-4dbb-981c-64cf47ff25cf, invocation_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, invocation_timestamp=2019-01-30T09:27:20.211Z, origin=Only For Testing, session_id=f33d0e9e-14c5-4fb6-9336-5299e83834c3, session_timestamp=2019-01-30T09:27:20.211Z, thread-id=578, tx_id=7182C22D701EE95E143921B1A21589A87E434E21096E06FA4150FA4D64BFD75A}
[WARN ] 2019-01-30T09:27:24,516Z [Mock node 2 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 75AF186C9D21CAAD9C591F6894C7B3EF5E7C8350DB1836CD84162A8BA3060EA5, not inserting the second time {fiber-id=10000007, flow-id=b568936f-be2f-4f20-be83-779d024a4ca3, invocation_id=400c55b8-949c-4fac-81a3-ea874b7d4d15, invocation_timestamp=2019-01-30T09:27:24.460Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=400c55b8-949c-4fac-81a3-ea874b7d4d15, session_timestamp=2019-01-30T09:27:24.460Z, thread-id=594}
[INFO ] 2019-01-30T09:27:24,646Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092724.549/nodes/0/cordapps] {}
[INFO ] 2019-01-30T09:27:24,647Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:24,647Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:24,736Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:24,737Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:24,767Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:24,775Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:24,780Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:24,781Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:24,781Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:24,788Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:24.550Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:25,378Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:25,381Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092724.549/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:25,381Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:25,433Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:25,442Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:25,443Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:25,623Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-01-30T09:27:25,630Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:25,630Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:25,632Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:25,652Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:25,665Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:25,669Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:25,674Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:26,060Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:26,072Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:26,074Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:26,075Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:26,077Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:26,083Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-01-30T09:27:26,084Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092724.549/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:26,085Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:26,104Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:26,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:26,112Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:26,112Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:26,112Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:26,133Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092724.549/nodes/1/cordapps] {}
[INFO ] 2019-01-30T09:27:26,134Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:26,134Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:26,227Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:26,228Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:26,258Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:26,267Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:26,301Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:26,301Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:26,301Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:26,307Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:24.550Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:26,924Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:26,927Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092724.549/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:26,927Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:26,980Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:26,982Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:27,010Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:27,010Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:27,265Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:27,273Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:27,273Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,276Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:27,282Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,291Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:27,295Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,300Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:27,610Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:27,618Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:27,619Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:27,620Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:27,623Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:27,628Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092724.549/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:27,629Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:27,639Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:27,646Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:27,653Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,654Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:27,661Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,661Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:27,662Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:27,662Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:27,675Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092724.549/nodes/2/cordapps] {}
[INFO ] 2019-01-30T09:27:27,676Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:27,676Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:27,754Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:27,754Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:27,782Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:27,789Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:27,814Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:27,814Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:27,815Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:27,820Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:24.550Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:28,286Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:28,289Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092724.549/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:28,290Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:28,319Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:28,320Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:28,341Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:28,341Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:28,486Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:28,492Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:28,492Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,495Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:28,500Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,508Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:28,511Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,518Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:28,811Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:28,818Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:28,820Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:28,820Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:28,823Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:28,827Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092724.549/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:28,828Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:28,839Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:28,847Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:28,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,857Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:28,864Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:28,865Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:28,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,874Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:28,881Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,881Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:28,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:28,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:28,897Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190130-092724.549/nodes/3/cordapps] {}
[INFO ] 2019-01-30T09:27:28,897Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar, rootPackageName=null), RestrictedURL(url=file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar, rootPackageName=null) {}
[INFO ] 2019-01-30T09:27:28,898Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:28,989Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:28,990Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Previous%20Content/Users/nguyenthanhbinh/Blockchain/test/corda/confidential-identities/build/mock-network/20190130-092724.549/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT.jar {}
[INFO ] 2019-01-30T09:27:29,017Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-01-30T09:27:29,032Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-01-30T09:27:29,059Z [Test worker] internal.InternalMockNetwork$MockNode.installFinalityHandler - FinalityHandler is disabled as there are no CorDapps loaded which require it {}
[INFO ] 2019-01-30T09:27:29,060Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-01-30T09:27:29,060Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-01-30T09:27:29,065Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-01-30T09:27:24.550Z
      epoch=1
  } {}
[INFO ] 2019-01-30T09:27:29,644Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-01-30T09:27:29,648Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190130-092724.549/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-01-30T09:27:29,648Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-01-30T09:27:29,688Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-01-30T09:27:29,690Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-01-30T09:27:29,717Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:29,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:29,913Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-01-30T09:27:29,920Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-01-30T09:27:29,920Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:29,923Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:29,930Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:29,936Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-01-30T09:27:29,941Z [MockNode-21-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:29,945Z [MockNode-21-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:30,318Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.CommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:30,329Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.JavaCommercialPaper]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:30,330Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Cash]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:30,331Z [Test worker] persistence.NodeAttachmentService.queryAttachments - Attachment query criteria: AttachmentsQueryCriteria(uploaderCondition=CollectionExpression(operator=IN, rightLiteral=[app, rpc]), filenameCondition=null, uploadDateCondition=null, contractClassNamesCondition=EqualityComparison(operator=EQUAL, rightLiteral=[net.corda.finance.contracts.asset.Obligation]), signersCondition=null, isSignedCondition=EqualityComparison(operator=EQUAL, rightLiteral=true), versionCondition=EqualityComparison(operator=EQUAL, rightLiteral=1)), sorting: null {}
[INFO ] 2019-01-30T09:27:30,333Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=69DFA8D580BAC148078A44F3B4272651701B1A485C867EEF1206E3C69690D436 uploader=app filename=null {}
[INFO ] 2019-01-30T09:27:30,342Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT in build/mock-network/20190130-092724.549/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT.conf {}
[INFO ] 2019-01-30T09:27:30,343Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-01-30T09:27:30,359Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1548840445630) {}
[INFO ] 2019-01-30T09:27:30,366Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,377Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,379Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,387Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1548840447273) {}
[INFO ] 2019-01-30T09:27:30,389Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,398Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,399Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,408Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1548840448492) {}
[INFO ] 2019-01-30T09:27:30,410Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,421Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-01-30T09:27:30,430Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,430Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:30,430Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1548840449920) {}
[INFO ] 2019-01-30T09:27:30,430Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-01-30T09:27:30,431Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.IdentitySyncFlowTests$Initiator to initiate net.corda.confidential.IdentitySyncFlowTests$Receive (version 1) {}
[INFO ] 2019-01-30T09:27:30,567Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,567Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,599Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,599Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[WARN ] 2019-01-30T09:27:30,691Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B75B38E082EB0ABD6B57EF7BCE2C54E8158C95C0E8F313A94ACFAC03185D2CE8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[WARN ] 2019-01-30T09:27:30,691Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 01C2EE41841D1F337FFC1867BDC4C05EC4C86BC43296814198C2D068E380F61E, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,692Z [Mock node 3 thread] corda.flow.call - Generating spend for: 6f988ada-a85c-40ac-a4a6-4d6c486b2490 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,705Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 6f988ada-a85c-40ac-a4a6-4d6c486b2490 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[INFO ] 2019-01-30T09:27:30,744Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=F0B1DA1D760B520F1A9547481417BA8E8F33B7FCB874CD52DC7E5EFC5021C032}
[WARN ] 2019-01-30T09:27:30,776Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B75B38E082EB0ABD6B57EF7BCE2C54E8158C95C0E8F313A94ACFAC03185D2CE8, not inserting the second time {fiber-id=10000009, flow-id=5d367424-07b3-4ed7-9c7a-39a9a5784072, invocation_id=66859f55-db0d-44a4-bea6-50e41be03891, invocation_timestamp=2019-01-30T09:27:30.650Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=66859f55-db0d-44a4-bea6-50e41be03891, session_timestamp=2019-01-30T09:27:30.650Z, thread-id=808}
[WARN ] 2019-01-30T09:27:30,777Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EB225EA940793E87DF55AC3220668EE88A1BB7A1B4BD508C7E87730C8CA62EFC, not inserting the second time {fiber-id=10000009, flow-id=5d367424-07b3-4ed7-9c7a-39a9a5784072, invocation_id=66859f55-db0d-44a4-bea6-50e41be03891, invocation_timestamp=2019-01-30T09:27:30.650Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=66859f55-db0d-44a4-bea6-50e41be03891, session_timestamp=2019-01-30T09:27:30.650Z, thread-id=808}
[INFO ] 2019-01-30T09:27:30,789Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[INFO ] 2019-01-30T09:27:30,821Z [Mock node 0 thread] notary.SinglePartyNotaryService.createServiceFlow - Starting in validating mode {}
[WARN ] 2019-01-30T09:27:30,840Z [Mock node 0 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=6a58204c-562d-4256-8930-fe488782b9f6, invocation_id=898dbb1a-bbc0-4f9e-b5d5-64a76e6fd8af, invocation_timestamp=2019-01-30T09:27:30.821Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=898dbb1a-bbc0-4f9e-b5d5-64a76e6fd8af, session_timestamp=2019-01-30T09:27:30.821Z, thread-id=809}
[INFO ] 2019-01-30T09:27:30,934Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[INFO ] 2019-01-30T09:27:30,936Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[INFO ] 2019-01-30T09:27:30,951Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[INFO ] 2019-01-30T09:27:30,952Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[INFO ] 2019-01-30T09:27:30,952Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000008, flow-id=6f988ada-a85c-40ac-a4a6-4d6c486b2490, invocation_id=f1d269fa-0c2a-496c-ae79-9d282569171c, invocation_timestamp=2019-01-30T09:27:30.431Z, origin=Only For Testing, session_id=f1d269fa-0c2a-496c-ae79-9d282569171c, session_timestamp=2019-01-30T09:27:30.431Z, thread-id=808, tx_id=0646B0F6C195C70EBD795F8F78D0E66D4A19D90CE380CE51EFCDB158E7434F1E}
[WARN ] 2019-01-30T09:27:30,967Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B75B38E082EB0ABD6B57EF7BCE2C54E8158C95C0E8F313A94ACFAC03185D2CE8, not inserting the second time {}
[WARN ] 2019-01-30T09:27:31,033Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B75B38E082EB0ABD6B57EF7BCE2C54E8158C95C0E8F313A94ACFAC03185D2CE8, not inserting the second time {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810}
[WARN ] 2019-01-30T09:27:31,036Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B617BE0998CA7043D8CA9EF586130E655A0CEB0FA043EC292E27FCA060D2D951, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808}
[INFO ] 2019-01-30T09:27:31,038Z [Mock node 3 thread] corda.flow.call - Generating spend for: e99afca4-61d0-48ff-bc6f-3565161787a4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808}
[WARN ] 2019-01-30T09:27:31,050Z [Mock node 1 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810}
[INFO ] 2019-01-30T09:27:31,050Z [Mock node 3 thread] corda.flow.call - Signing transaction for: e99afca4-61d0-48ff-bc6f-3565161787a4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808}
[INFO ] 2019-01-30T09:27:31,083Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808}
[INFO ] 2019-01-30T09:27:31,122Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,134Z [Mock node 0 thread] notary.SinglePartyNotaryService.createServiceFlow - Starting in validating mode {fiber-id=10000010, flow-id=6a58204c-562d-4256-8930-fe488782b9f6, invocation_id=898dbb1a-bbc0-4f9e-b5d5-64a76e6fd8af, invocation_timestamp=2019-01-30T09:27:30.821Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=898dbb1a-bbc0-4f9e-b5d5-64a76e6fd8af, session_timestamp=2019-01-30T09:27:30.821Z, thread-id=809}
[WARN ] 2019-01-30T09:27:31,148Z [Mock node 0 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000013, flow-id=bf5a3e02-1547-44ca-bb34-31632db3629a, invocation_id=73b4f3cf-c79f-4a28-9d46-00e0a6236cd0, invocation_timestamp=2019-01-30T09:27:31.134Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=73b4f3cf-c79f-4a28-9d46-00e0a6236cd0, session_timestamp=2019-01-30T09:27:31.134Z, thread-id=809}
[INFO ] 2019-01-30T09:27:31,244Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,246Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,255Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,274Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[WARN ] 2019-01-30T09:27:31,274Z [Mock node 1 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[WARN ] 2019-01-30T09:27:31,275Z [Mock node 1 thread] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,341Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,341Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,342Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=e99afca4-61d0-48ff-bc6f-3565161787a4, invocation_id=4d837e64-0b82-41eb-8bac-71af7baace39, invocation_timestamp=2019-01-30T09:27:30.972Z, origin=Only For Testing, session_id=4d837e64-0b82-41eb-8bac-71af7baace39, session_timestamp=2019-01-30T09:27:30.972Z, thread-id=808, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,376Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,472Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[INFO ] 2019-01-30T09:27:31,487Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=914c1b08-29be-4ef5-9a49-28393facca4c, invocation_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, invocation_timestamp=2019-01-30T09:27:30.994Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=82d25bb4-910a-4c53-b572-77f29ab74dd7, session_timestamp=2019-01-30T09:27:30.994Z, thread-id=810, tx_id=A452F107271202B82A75D69C72D43BC00ECF60A6810AA0A13A17B171A65BFEE9}
[WARN ] 2019-01-30T09:27:31,559Z [Mock node 2 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B617BE0998CA7043D8CA9EF586130E655A0CEB0FA043EC292E27FCA060D2D951, not inserting the second time {fiber-id=10000015, flow-id=956ea9d2-8553-4556-a6bd-1fb73bb4f1bb, invocation_id=ee305f75-36ce-4e63-834c-6ba07a96a72b, invocation_timestamp=2019-01-30T09:27:31.527Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=ee305f75-36ce-4e63-834c-6ba07a96a72b, session_timestamp=2019-01-30T09:27:31.527Z, thread-id=811}
